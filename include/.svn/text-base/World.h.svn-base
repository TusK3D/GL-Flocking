#ifndef __GL_WINDOW_H__
#define __GL_WINDOW_H__

#include "include/Flocking.h"
#include "include/DivideSpace.h"

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/TransformStack.h>
#include <ngl/Vec3.h>
#include <ngl/Obj.h>

// must be included after our stuff becuase GLEW needs to be first
#include <QtOpenGL>


class World : public QGLWidget
{
Q_OBJECT        // must include this if you use Qt signals/slots
public :
  /// @brief Constructor for GLWindow
  /// @param [in] _numSpheres the number of spheres to create passed from
  /// main window and main(argv[1])
  /// @param [in] parent the parent window to create the GL context in
  World(
           int _numSpheres,
           QWidget *_parent
          );
  ~World();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief toggle the Animation of the lights called from main window
  //----------------------------------------------------------------------------------------------------------------------
  inline void toggleAnimation(){m_animate^=true;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method called from main window for keyPress
  //----------------------------------------------------------------------------------------------------------------------
  void keyPress(
                 QKeyEvent *_event
               );
private :

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the Right mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origXPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our Camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief timer to change the sphere position by calling update()
  //----------------------------------------------------------------------------------------------------------------------
  int m_sphereUpdateTimer;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our transform stack for drawing the teapots
  //----------------------------------------------------------------------------------------------------------------------
  ngl::TransformStack m_transformStack;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if animation is active or not
  //----------------------------------------------------------------------------------------------------------------------
  bool m_animate;
  /// @brief our model
  ngl::Obj *m_mesh;


protected:

  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
   void initializeGL();

  /// \brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
  void resizeGL(
                const int _w,
                const int _h
               );
  /// @brief this is the main gl drawing routine which is called whenever the window needs to
  /// be re-drawn
  void paintGL();
private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a dynamic pointer to contain our flock
  //----------------------------------------------------------------------------------------------------------------------
  Flocking *m_flock;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the bounding box to contain the flock to be changed to container type
  //----------------------------------------------------------------------------------------------------------------------
  DivideSpace *grid;
  ///@brief the centre and dimensions of the grid

  ngl::Vec3 m_centre;
  ngl::Vec3 m_dimensions;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if we need to do boidboid checks
  //----------------------------------------------------------------------------------------------------------------------
  bool m_checkBoidBoid;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief light for the scene
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Light *m_light;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------

  void mouseMoveEvent (
                       QMouseEvent * _event
                      );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
   void mousePressEvent (
                        QMouseEvent *_event
                       );

   //----------------------------------------------------------------------------------------------------------------------
   /// @brief this method is called everytime the mouse button is released
   /// inherited from QObject and overridden here.
   /// @param _event the Qt Event structure
   //----------------------------------------------------------------------------------------------------------------------
   void mouseReleaseEvent (
                            QMouseEvent *_event
                           );
   //----------------------------------------------------------------------------------------------------------------------
   /// @brief this method is called everytime the mouse wheel is moved
   /// inherited from QObject and overridden here.
   /// @param _event the Qt Event structure
   //----------------------------------------------------------------------------------------------------------------------
   void wheelEvent(
                     QWheelEvent *_event
                  );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the timer event triggered from the timers
  /// @param _even the event of the timer triggered by Qt
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(
                  QTimerEvent *_event
                 );
  //----------------------------------------------------------------------------------------------------------------------

  /// @brief reset the sphere array
  //----------------------------------------------------------------------------------------------------------------------


  void removeSphere();
  void loadMatricesToShader(
                         ngl::TransformStack &_tx
                       );
  void loadMatricesToColourShader(
                                   ngl::TransformStack &_tx
                                 );
};

#endif
