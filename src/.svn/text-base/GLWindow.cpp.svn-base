#include "GLWindow.h"
#include <iostream>
#include <boost/foreach.hpp>

#include <ngl/Camera.h>
#include <ngl/Light.h>
#include <ngl/Mat4.h>
#include <ngl/Transformation.h>
#include <ngl/Material.h>
#include <ngl/NGLInit.h>
#include <ngl/VAOPrimitives.h>
#include <ngl/ShaderLib.h>
#include <ngl/Random.h>
#include <ngl/Util.h>

//----------------------------------------------------------------------------------------------------------------------
/// @brief the increment for x/y translation with mouse movement
//----------------------------------------------------------------------------------------------------------------------
const static float INCREMENT=0.01;
//----------------------------------------------------------------------------------------------------------------------
/// @brief the increment for the wheel zoom
//----------------------------------------------------------------------------------------------------------------------
const static float ZOOM=0.1;

const static int s_extents=20;
//----------------------------------------------------------------------------------------------------------------------
GLWindow::GLWindow(
									 int _numSpheres,
                   QWidget *_parent
                  ) : QGLWidget( new CreateCoreGLContext(QGLFormat::defaultFormat()), _parent )
{
  // set this widget to have the initial keyboard focus
  setFocus();
  // re-size the widget to that of the parent (in this case the GLFrame passed in on construction)
  this->resize(_parent->size());
  // Now set the initial GLWindow attributes to default values
  // Roate is false
  m_rotate=false;
  // mouse rotation values set to 0
  m_spinXFace=0;
  m_spinYFace=0;
  m_origX=0;
  m_origY=0;
  m_sphereUpdateTimer=startTimer(25);
  m_animate=true;
    m_checkSphereSphere=false;
	// create vectors for the position and direction
	m_numSpheres=_numSpheres;
  resetSpheres();

}


void GLWindow::resetSpheres()
{
    std::vector<Boid>::iterator begin=m_sphereArray.begin();
    std::vector<Boid>::iterator end=m_sphereArray.end();
  m_sphereArray.erase(begin,end);
  ngl::Vec3 pos(4,4,4);
  ngl::Vec3 dir=45;
	ngl::Random *rng=ngl::Random::instance();
	// loop and create the initial particle list
	for(int i=0; i<m_numSpheres; ++i)
	{
    dir=rng->getRandomVec3();
		// add the spheres to the end of the particle list
        m_sphereArray.push_back(Boid(rng->getRandomPoint(s_extents,s_extents,s_extents),dir,rng->randomPositiveNumber(2)+0.5));
	}

}


GLWindow::~GLWindow()
{
  ngl::NGLInit *Init = ngl::NGLInit::instance();
  std::cout<<"Shutting down NGL, removing VBO's and Shaders\n";
  Init->NGLQuit();
}

// This virtual function is called once before the first call to paintGL() or resizeGL(),
//and then once whenever the widget has been assigned a new QGLContext.
// This function should set up any required OpenGL context rendering flags, defining display lists, etc.

//----------------------------------------------------------------------------------------------------------------------
void GLWindow::initializeGL()
{
  // create the lights

  glClearColor(0.4f, 0.4f, 0.4f, 1.0f);			   // Grey Background
  // enable depth testing for drawing
   glEnable(GL_DEPTH_TEST);
   // Now we will create a basic Camera from the graphics library
   // This is a static camera so it only needs to be set once
   // First create Values for the camera position
   ngl::Vec3 from(0,120,120);
   ngl::Vec3 to(0,0,0);
   ngl::Vec3 up(0,1,0);
   ngl::NGLInit *Init = ngl::NGLInit::instance();
   #ifdef WIN32
   	glewInit();
   #endif
   Init->initGlew();
   m_cam= new ngl::Camera(from,to,up,ngl::PERSPECTIVE);
   // set the shape using FOV 45 Aspect Ratio based on Width and Height
   // The final two are near and far clipping planes of 0.5 and 10
   m_cam->setShape(45,(float)720.0/576.0,0.5,150,ngl::PERSPECTIVE);
   // now to load the shader and set the values
   // grab an instance of shader manager
    ngl::ShaderLib *shader=ngl::ShaderLib::instance();
    // we are creating a shader called Phong
    shader->createShaderProgram("Phong");
    // now we are going to create empty shaders for Frag and Vert
    shader->attachShader("PhongVertex",ngl::VERTEX);
    shader->attachShader("PhongFragment",ngl::FRAGMENT);
    // attach the source
    shader->loadShaderSource("PhongVertex","shaders/Phong.vs");
    shader->loadShaderSource("PhongFragment","shaders/Phong.fs");
    // compile the shaders
    shader->compileShader("PhongVertex");
    shader->compileShader("PhongFragment");
    // add them to the program
    shader->attachShaderToProgram("Phong","PhongVertex");
    shader->attachShaderToProgram("Phong","PhongFragment");
    // now bind the shader attributes for most NGL primitives we use the following
    // layout attribute 0 is the vertex data (x,y,z)
    shader->bindAttribute("Phong",0,"inVert");
    // attribute 1 is the UV data u,v (if present)
    shader->bindAttribute("Phong",1,"inUV");
    // attribute 2 are the normals x,y,z
    shader->bindAttribute("Phong",2,"inNormal");

    // now we have associated this data we can link the shader
    shader->linkProgramObject("Phong");
    // and make it active ready to load values
    (*shader)["Phong"]->use();
    shader->setShaderParam1i("Normalize",1);

    // now pass the modelView and projection values to the shader
    // the shader will use the currently active material and light0 so set them
    ngl::Material m(ngl::GOLD);
    m.loadToShader("material");
    m_light = new ngl::Light(ngl::Vec3(150,50,50),ngl::Colour(1,1,1,1),ngl::Colour(1,1,1,1),ngl::POINTLIGHT);
    // now create our light this is done after the camera so we can pass the
    // transpose of the projection matrix to the light to do correct eye space
    // transformations
    ngl::Mat4 iv=m_cam->getViewMatrix();
    iv.transpose();
    m_light->setTransform(iv);
    m_light->setAttenuation(1,0,0);
    m_light->enable();
    // load these values to the shader as well
    m_light->loadToShader("light");
    shader->createShaderProgram("Colour");

     shader->attachShader("ColourVertex",ngl::VERTEX);
     shader->attachShader("ColourFragment",ngl::FRAGMENT);
     shader->loadShaderSource("ColourVertex","shaders/Colour.vs");
     shader->loadShaderSource("ColourFragment","shaders/Colour.fs");

     shader->compileShader("ColourVertex");
     shader->compileShader("ColourFragment");
     shader->attachShaderToProgram("Colour","ColourVertex");
     shader->attachShaderToProgram("Colour","ColourFragment");

     shader->bindAttribute("Colour",0,"inVert");

     shader->linkProgramObject("Colour");
     (*shader)["Colour"]->use();
     shader->setShaderParam4f("Colour",1,1,1,1);
   glEnable(GL_DEPTH_TEST); // for removal of hidden surfaces

   ngl::VAOPrimitives *prim =  ngl::VAOPrimitives::instance();
   prim->createCone("cone",1.0,4.0,2,1);
  // create our Bounding Box, needs to be done once we have a gl context as we create VAO for drawing
   m_bbox = new ngl::BBox(ngl::Vec3(0,0,0),80,80,80);

   m_bbox->setDrawMode(GL_LINE);
}

//----------------------------------------------------------------------------------------------------------------------
//This virtual function is called whenever the widget has been resized.
// The new size is passed in width and height.
void GLWindow::resizeGL(
                        int _w,
                        int _h
                       )
{
  glViewport(0,0,_w,_h);
  m_cam->setShape(45,(float)_w/_h,0.5,150,ngl::PERSPECTIVE);
 }
void GLWindow::loadMatricesToShader(
                                     ngl::TransformStack &_tx
                                   )
{
  ngl::ShaderLib *shader=ngl::ShaderLib::instance();
  (*shader)["Phong"]->use();

  ngl::Mat4 MV;
  ngl::Mat4 MVP;
  ngl::Mat3 normalMatrix;
  ngl::Mat4 M;
  M=_tx.getCurrentTransform().getMatrix();
  MV= _tx.getCurrAndGlobal().getMatrix()*m_cam->getViewMatrix() ;
  MVP=MV*m_cam->getProjectionMatrix() ;
  normalMatrix=MV;
  normalMatrix.inverse();
  shader->setShaderParamFromMat4("MV",MV);
  shader->setShaderParamFromMat4("MVP",MVP);
  shader->setShaderParamFromMat3("normalMatrix",normalMatrix);
  shader->setShaderParamFromMat4("M",M);
}

void GLWindow::loadMatricesToColourShader(
                                           ngl::TransformStack &_tx
                                         )
{
  ngl::ShaderLib *shader=ngl::ShaderLib::instance();
  (*shader)["Colour"]->use();
  ngl::Mat4 MV;
  ngl::Mat4 MVP;

  MV= _tx.getCurrAndGlobal().getMatrix()*m_cam->getViewMatrix() ;
  MVP=MV*m_cam->getProjectionMatrix();
  shader->setShaderParamFromMat4("MVP",MVP);

}

//----------------------------------------------------------------------------------------------------------------------
//This virtual function is called whenever the widget needs to be painted.
// this is our main drawing routine
void GLWindow::paintGL()
{
  // clear the screen and depth buffer
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  // build our transform stack
   ngl::Transformation trans;
   // Rotation based on the mouse position for our global
   // transform
   ngl::Mat4 rotX;
   ngl::Mat4 rotY;
   // create the rotation matrices
   rotX.rotateX(m_spinXFace);
   rotY.rotateY(m_spinYFace);
   // multiply the rotations
   ngl::Mat4 final=rotY*rotX;
   // add the translations
   final.m_m[3][0] = m_modelPos.m_x;
   final.m_m[3][1] = m_modelPos.m_y;
   final.m_m[3][2] = m_modelPos.m_z;
   // set this in the TX stack
   trans.setMatrix(final);
   m_transformStack.setGlobal(trans);

  // grab an instance of the shader manager
  ngl::ShaderLib *shader=ngl::ShaderLib::instance();
  (*shader)["Colour"]->use();
  loadMatricesToColourShader(m_transformStack);
	m_bbox->draw();

  shader->use("Phong");

  BOOST_FOREACH(Boid s, m_sphereArray)
	{
    s.draw("Phong",m_transformStack,m_cam);
	}

}




//----------------------------------------------------------------------------------------------------------------------
void GLWindow::update()
{
    BOOST_FOREACH(Boid &s, m_sphereArray)
	{
       s.move();
	}
	checkCollisions();
}



void GLWindow::mouseMoveEvent (
                               QMouseEvent * _event
                              )
{
  // note the method buttons() is the button state when event was called
  // this is different from button() which is used to check which button was
  // pressed when the mousePress/Release event is generated
  if(m_rotate && _event->buttons() == Qt::LeftButton)
  {
    int diffx=_event->x()-m_origX;
    int diffy=_event->y()-m_origY;
    m_spinXFace += (float) 0.5f * diffy;
    m_spinYFace += (float) 0.5f * diffx;
    m_origX = _event->x();
    m_origY = _event->y();
    updateGL();

  }
  // right mouse translate code
  else if(m_translate && _event->buttons() == Qt::RightButton)
  {
    int diffX = (int)(_event->x() - m_origXPos);
    int diffY = (int)(_event->y() - m_origYPos);
    m_origXPos=_event->x();
    m_origYPos=_event->y();
    m_modelPos.m_x += INCREMENT * diffX;
    m_modelPos.m_y -= INCREMENT * diffY;
    updateGL();

  }

}

//----------------------------------------------------------------------------------------------------------------------
void GLWindow::mousePressEvent (
                                QMouseEvent * _event
                               )
{
  // this method is called when the mouse button is pressed in this case we
  // store the value where the maouse was clicked (x,y) and set the Rotate flag to true
  if(_event->button() == Qt::LeftButton)
  {
    m_origX = _event->x();
    m_origY = _event->y();
    m_rotate =true;
  }
  // right mouse translate mode
  else if(_event->button() == Qt::RightButton)
  {
    m_origXPos = _event->x();
    m_origYPos = _event->y();
    m_translate=true;
  }

}

//----------------------------------------------------------------------------------------------------------------------
void GLWindow::mouseReleaseEvent (
                                  QMouseEvent * _event
                                 )
{
  // this event is called when the mouse button is released
  // we then set Rotate to false
  if (_event->button() == Qt::LeftButton)
  {
    m_rotate=false;
  }
  // right mouse translate mode
  if (_event->button() == Qt::RightButton)
  {
    m_translate=false;
  }
}

//----------------------------------------------------------------------------------------------------------------------
void GLWindow::wheelEvent(QWheelEvent *_event)
{

  // check the diff of the wheel position (0 means no change)
  if(_event->delta() > 0)
  {
    m_modelPos.m_z+=ZOOM;
  }
  else if(_event->delta() <0 )
  {
    m_modelPos.m_z-=ZOOM;
  }
  updateGL();
}


void GLWindow::timerEvent(
                          QTimerEvent *_event
                         )
{
	if(_event->timerId() == m_sphereUpdateTimer)
	{
		if (m_animate !=true)
		{
			return;
		}
		update();
		updateGL();
	}
}

void GLWindow::keyPress(QKeyEvent *_event)
{

  switch (_event->key())
  {
		case  Qt::Key_Space : m_animate^=true; break;
	  case Qt::Key_S : m_checkSphereSphere^=true; break;
		case Qt::Key_R : resetSpheres(); break;
	case Qt::Key_Minus : removeSphere(); break;
	case Qt::Key_Plus : addSphere(); break;
	}

}


bool GLWindow::sphereSphereCollision(
                                     ngl::Vec3 _pos1,
																		 GLfloat _radius1,
                                     ngl::Vec3 _pos2,
																		 GLfloat _radius2
																		)
{
  // the relative position of the spheres
  ngl::Vec3 relPos;
  //min an max distances of the spheres
  GLfloat dist;
  GLfloat minDist;
  GLfloat len;
  relPos =_pos1-_pos2;
  // and the distance
  len=relPos.length();
  dist=len*len;
  minDist =_radius1+_radius2;
  // if it is a hit
  if(dist <=(minDist * minDist))
  {
    return true;
  }
  else
  {
    return false;
  }
}

//----------------------------------------------------------------------------------------------------------------------
void GLWindow::BBoxCollision()
{
  //create an array of the extents of the bounding box
  float ext[6];
  ext[0]=ext[1]=(m_bbox->height()/2.0f);
  ext[2]=ext[3]=(m_bbox->width()/2.0f);
  ext[4]=ext[5]=(m_bbox->depth()/2.0f);
  // Dot product needs a Vector so we convert The Point Temp into a Vector so we can
  // do a dot product on it
  ngl::Vec3 p;
  // D is the distance of the Agent from the Plane. If it is less than ext[i] then there is
  // no collision
  GLfloat D;
  // Loop for each sphere in the vector list
  BOOST_FOREACH(Boid &s, m_sphereArray)
  {
    p=s.getPos();
    //Now we need to check the Sphere agains all 6 planes of the BBOx
    //If a collision is found we change the dir of the Sphere then Break
    for(int i=0; i<6; ++i)
    {
      //to calculate the distance we take the dotporduct of the Plane Normal
      //with the new point P
      D=m_bbox->getNormalArray()[i].dot(p);
      //Now Add the Radius of the sphere to the offsett
      D+=s.getRadius();
      // If this is greater or equal to the BBox extent /2 then there is a collision
      //So we calculate the Spheres new direction
      if(D >=ext[i])
      {
        //We use the same calculation as in raytracing to determine the
        // the new direction
        GLfloat x= 2*( s.getDirection().dot((m_bbox->getNormalArray()[i])));
        ngl::Vec3 d =m_bbox->getNormalArray()[i]*x;
        s.setDirection(s.getDirection()-d);
        s.setHit();
      }//end of hit test
     }//end of each face test
    }//end of for
}

void  GLWindow::checkSphereCollisions()
{
  bool collide;

  unsigned int size=m_sphereArray.size();

  for(unsigned int ToCheck=0; ToCheck<size; ++ToCheck)
	{
    for(unsigned int Current=0; Current<size; ++Current)
    {
      // don't check against self
      if(ToCheck == Current)  continue;

      else
      {
        //cout <<"doing check"<<endl;
        collide =sphereSphereCollision(m_sphereArray[Current].getPos(),m_sphereArray[Current].getRadius(),
                                       m_sphereArray[ToCheck].getPos(),m_sphereArray[ToCheck].getRadius()
                                      );
        if(collide== true)
        {
          m_sphereArray[Current].reverse();
          m_sphereArray[Current].setHit();
				}
      }
    }
  }
}


void  GLWindow::checkCollisions()
{

	if(m_checkSphereSphere == true)
	{
		checkSphereCollisions();
  }
	BBoxCollision();

}

void GLWindow::removeSphere()
{
    std::vector<Boid>::iterator end=m_sphereArray.end();
  if(--m_numSpheres==0)
	{
		m_numSpheres=1;
	}
	else
	{
		m_sphereArray.erase(end-1,end);
	}
}

void GLWindow::addSphere()
{
	ngl::Random *rng=ngl::Random::instance();
  ngl::Vec3 dir;
  dir=rng->getRandomVec3();
	// add the spheres to the end of the particle list
    m_sphereArray.push_back(Boid(rng->getRandomPoint(s_extents,s_extents,s_extents),dir,rng->randomPositiveNumber(2)+0.5));
	++m_numSpheres;
}



